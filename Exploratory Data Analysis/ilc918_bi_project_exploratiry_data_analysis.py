# -*- coding: utf-8 -*-
"""ILC918_BI_Project_Exploratiry_Data_Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13yd-fc7r4eM5In_EMXPZMlUF1slR2pti
"""

import pandas as pd

data = pd.read_csv("Facts_Table_For_EDA.csv")

# Head function tells high level information about the data frame

data.head()

data.shape

"""### **There are 16 columns in the data frame as visible above**

"""

# To find missing values, data types and memory usage for each column

data.info()

"""### **As found, 'Category' Column has a lot of null values. Later in Power bi , I used fill-down approach for these null values**"""

# Categorical columns : Lisitng out data points for each category
data.value_counts('Category')

# Categorical columns : Lisitng out data points for each category
data.value_counts('Segment')

#Descriptive Statistics of the data

data.describe()



"""### **Visulaizing Numerical Data**"""

import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

sns.histplot(data=data , x="Revenue",bins='auto')
plt.xlim(0,3000)
plt.show()

"""The histogram still represents the distribution of revenue data, but now the x-axis (representing “Revenue”) ranges from 0 to 3000, providing a “zoomed in” view of the lower revenue values. The y-axis (representing “Count”) still ranges from 0 to 60000.

From the updated histogram, we can observe that:

There is still a significant spike in count near the 0 mark on the Revenue axis, reaching up to approximately 60000 in count. This suggests that there are many instances where the revenue is very low, close to 0.
As revenue increases, the count decreases, with smaller spikes occurring intermittently. This shows that higher revenues, even within this lower range, are less frequent in this dataset.
"""

sns.histplot(data=data , x="Units", bins=100, binwidth=1)
plt.xlim(0,20)
plt.show()



"""# DATA VALIDATION"""

#To validate categorical data by checking is categories are from a specfifc list of values or not
data['Category'].isin(["Urban","Rural","Youth","Mix"])

"""As stated above, we have lots of null values in the Category column. Thus majority of resukts are False"""

#Validating Numerical Data
data= data.dropna(subset=['Date'])
data['Date']= pd.to_datetime(data['Date'])
data['Date']

data['Year']=data['Date'].dt.year
data['Month']=data['Date'].dt.month
data['week_of_year']=data['Date'].dt.isocalendar().week

data['Year']= data['Year'].astype(int)

#Minimum year of sales in the data
data['Year'].min()

#Maximum year of sales in the data
data['Year'].max()

#Using boxplot to find distribution range of years
sns.boxplot(data=data, x="Year")

ax = sns.boxplot(x='Year',  data=data)  # Replace 'value_column' with the column you're analyzing

# Set x-axis to display integers only
ax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%d'))

plt.show()

#Using boxplot to find distribution range of
sns.boxplot(data=data, x="Year", y="Category")

ax = sns.boxplot(x='Year',  data=data)  # Replace 'value_column' with the column you're analyzing

# Set x-axis to display integers only
ax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%d'))

plt.show()

"""### *It seems that Rural Category sales were made from 2019-2020, and YOuth Category sales from  2020-2021. It is possible that Rural category was discontinued and Youth category was introduced ( based on the boxplot)*

# *Data Replations and patterns over time*
"""

ax= sns.lineplot(data=data, x="Year", y="Revenue")



# Set x-axis to display integers only
ax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%d'))

ax= sns.lineplot(data=data, x="Month", y="Revenue")



# Set x-axis to display integers only
ax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%d'))

"""Dark blue line: Mean Revenue  _____
Light Blue Area : Confidence interval

# ***Correlations in the data***
"""

ax= sns.scatterplot(data=data, x="Units", y="Revenue")



# Set x-axis to display integers only
ax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%d'))

sns.pairplot(data=data, vars=["Year","Month","week_of_year","Units"])
plt.show()

